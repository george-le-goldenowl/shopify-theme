{% if template != 'cart' %}
<div class="cart-fixed CartContent">
    <div class="js-close-card" onclick="CartPopup.Close(this);"></div>
    <div class="cart-fixed__wrap CartWrapContent">
        {%- render 'icon-loading' -%}
    </div>
</div>
<div class="cart-bg"></div>

<script type="text/javascript">
void 0 == window.Background && (window.Background = document.querySelector('.cart-bg'));
var CartPopup = {
    Content: document.querySelector('.CartContent'),
};
CartPopup.Lines = CartPopup.Content.querySelector('.CartLines');
CartPopup.CartWrapContent = CartPopup.Content.querySelector('.CartWrapContent');

CartPopup.Open = e => {
    (CartPopup.Content.classList.add('is-show'), window.Background.classList.add('is-show'), CartPopup.Refresh());
};

CartPopup.Close = e => {
    (CartPopup.Content.classList.remove('is-show'), window.Background.classList.remove('is-show'));
};

CartPopup.ShowEmpty = () => {
    CartPopup.CartWrapContent.innerHTML = (`{%- render 'icon-cart-empty' -%} {{ 'Continuing shopping' | link_to: '/collections' }}`);
};

CartPopup.ShowDetail = e => {
    e.classList.toggle('is-active');
    var next = e.parentElement.nextElementSibling;

    if (next.style.display === '' || next.style.display === 'none') {
        next.style.display = "block";
    } else {
        next.style.display = 'none';
    }
};

CartPopup.Refresh = async () => {
    const c = await getItem();
    if (c.item_count > 0) {
        var i, o, html = '';
        html += `
            <p class="text-center">
                <strong>Total ${Shopify.formatMoney(c.total_price)}</strong>
            </p>
            <div class="btn-payment">
                <a href="/checkout"><i class="fa fa-lock"></i>Proceed to Payment</a>
            </div>
            <p class="text-center">
                <span class="cart-count">${c.item_count}</span> Products in cart
            </p>
            <div class="CartLines">
        `;
        if ((o=(i = c.items).filter(i => !i.gift_card)).length) {
            o.forEach(e => {
                html += `
                    <div class="shipping__item" data-line-id="${e.id}">
                        <div class="row">
                            <div class="col-sm-4">
                                <div class="cart-img">
                                    <img src="${e.image}" alt="${e.title}">
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <a href="${e.url}" class="ttl">${e.product_title}</a>
                                <div class="btn-view">
                                    <a href="javascript:void(0)" onclick="CartPopup.ShowDetail(this);">View Detail</a>
                                </div>
                                <div class="view-more">
                                    <p class="qtybox"><strong>Quantity:</strong><input type="text" class="qty" value="${e.quantity}" readonly></p>
                                </div>
                            </div>
                            <div class="col-sm-2">
                                <p class="price">${Shopify.formatMoney(e.price)}</p>
                                <div class="btn-link-gray">
                                    <a href="javascript:void(0)" onclick="onDelete(this)" data-id="${e.id}"><i class="fa fa-trash"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
        }
        html += `<div class="btn-link-text text-center">{{ 'View and Edit Cart' | link_to: '/cart' }}</div>`;
        html += `</div>`;

        CartPopup.CartWrapContent.innerHTML = html;
    }
};
</script>
{% endif %}

<script type="text/javascript">
const removeItem = async Id => {
    return await fetch("/cart/change.json", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
        },
        body: JSON.stringify({
            id: Id,
            quantity: 0
        })
    }).then(res => res.json());
};
const addItem = async data => {
    return await fetch("/cart/add.json", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
        },
        body: JSON.stringify({...data})
    });
};
const getItem = async () => {
    return await fetch("/cart.json").then(res => res.json());
};
const addToCart = async e => {
    var parent = e.parentElement,
        self = parent.innerHTML;

    parent.innerHTML = `{% render 'icon-loading' %}`;
    var data = {
        id: e.dataset.variantId,
        quantity: document.querySelector('input[name=quantity]') ? document.querySelector('input[name=quantity]').value : 1
    };
    try {
        await addItem(data);
        void 0 != CartPopup && CartPopup.Refresh();
        parent.innerHTML = self;
    } catch(e) {
        console.log(e);
    }
};
const onDelete = async e => {
    e.parentElement.innerHTML = `{% render 'icon-loading' %}`;

    var id = e.dataset.id;
    await removeItem(id);
    void 0 != CartPopup && CartPopup.Refresh();
};

document.addEventListener('Sync', async e => {
    var cartItems = await getItem(),
        o,
        c,
        b;
    ((b = localStorage.getItem("Customer_Mode") || "retail"), ("wholesale" != b || (Shopify.User.caps && Shopify.User.caps.wholesale) || (b = "retail")));
  
    if ((c = (o = cartItems.items).filter(i => !i.gift_card)).length) {
        c.forEach(async e => {
            var a;
            if ((a = e.options_with_values.filter(i => i.name == 'Customer')).length) {
                if ((a.find(i => i.name == 'Customer')).value != b) {
                    removeItem(e.id.toString()).then(data => console.log(data));
                    var getProduct = await fetch(`/products/${e.handle}.json`).then(res => res.json());
                    var m = ``;
                    if (e.variant_title) {
                        m = e.variant_title.split('/');
                        m[0] = b + ' ';
                        m = m.join('/');
                    }
                    var o;
                    if ((o = getProduct.product.variants).length) {
                        var matched = o.find(i => i.title === m);
                        matched && addItem({
                            id: matched.id.toString(),
                            quantity: e.quantity
                        });
                    }
                }
            }
        });
    }
});
</script>