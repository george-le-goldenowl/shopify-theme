{% if template != 'cart' %}
<div class="cart-fixed CartContent">
    <div class="js-close-card" onclick="CartPopup.Close(this);"></div>
    <div class="cart-fixed__wrap CartWrapContent">
        {%- render 'icon-loading' -%}
    </div>
</div>
<div class="cart-bg"></div>

<script type="text/javascript">
void 0 == window.Background && (window.Background = document.querySelector('.cart-bg'));
var CartPopup = {
    Content: document.querySelector('.CartContent'),
};
CartPopup.Lines = CartPopup.Content.querySelector('.CartLines');
CartPopup.CartWrapContent = CartPopup.Content.querySelector('.CartWrapContent');

CartPopup.Open = e => {
    (CartPopup.Content.classList.add('is-show'), window.Background.classList.add('is-show'), CartPopup.Refresh());
};

CartPopup.Close = e => {
    (CartPopup.Content.classList.remove('is-show'), window.Background.classList.remove('is-show'));
};

CartPopup.ShowEmpty = () => {
    CartPopup.CartWrapContent.innerHTML = (`{%- render 'icon-cart-empty' -%} {{ 'Continuing shopping' | link_to: '/collections' }}`);
};

CartPopup.ShowDetail = e => {
    e.classList.toggle('is-active');
    var next = e.parentElement.nextElementSibling;

    if (next.style.display === '' || next.style.display === 'none') {
        next.style.display = "block";
    } else {
        next.style.display = 'none';
    }
};

CartPopup.Refresh = async () => {
    const c = await getItem();
    if (c.item_count > 0) {
        var i, o, html = '';
        html += `
            <p class="text-center">
                <strong>Total ${Shopify.formatMoney(c.total_price)}</strong>
            </p>
            <div class="btn-payment">
                <a href="/checkout"><i class="fa fa-lock"></i>Proceed to Payment</a>
            </div>
            <p class="text-center">
                <span class="cart-count">${c.item_count}</span> Products in cart
            </p>
            <div class="CartLines">
        `;
        if ((o=(i = c.items).filter(i => !i.gift_card)).length) {
            o.forEach(e => {
                html += `
                    <div class="shipping__item" data-line-id="${e.id}">
                        <div class="row">
                            <div class="col-sm-4">
                                <div class="cart-img">
                                    <img src="${e.image}" alt="${e.title}">
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <a href="${e.url}" class="ttl">${e.product_title}</a>
                                <div class="btn-view">
                                    <a href="javascript:void(0)" onclick="CartPopup.ShowDetail(this);">View Detail</a>
                                </div>
                                <div class="view-more">
                                    <p class="qtybox"><strong>Quantity:</strong><input type="text" class="qty" value="${e.quantity}" readonly></p>
                                </div>
                            </div>
                            <div class="col-sm-2">
                                <p class="price">${Shopify.formatMoney(e.price)}</p>
                                <div class="btn-link-gray">
                                    <a href="javascript:void(0)" onclick="onDelete(this)" data-id="${e.id}"><i class="fa fa-trash"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
        }
        html += `<div class="btn-link-text text-center">{{ 'View and Edit Cart' | link_to: '/cart' }}</div>`;
        html += `</div>`;
    } else {
        html = `
            {%- render 'icon-cart-empty' -%}
            <div class="btn-link-text text-center">{{ 'View and Edit Cart' | link_to: '/cart' }}</div>
        `;
    }

    CartPopup.CartWrapContent.innerHTML = html;
};
</script>
{% endif %}

<script type="text/javascript">
const removeItem = async (a) => await fetch("/cart/change.json", { method: "POST", headers: { "Content-Type": "application/json", Accept: "application/json" }, body: JSON.stringify({ id: a, quantity: 0 }) }).then((a) => a.json()),
    addItem = async (a) => await fetch("/cart/add.json", { method: "POST", headers: { "Content-Type": "application/json", Accept: "application/json" }, body: JSON.stringify({ ...a }) }),
    getItem = async () => await fetch("/cart.json").then((a) => a.json()),
    updateItems = async (a) => await fetch("/cart/update.json", { method: "POST", headers: { "Content-Type": "application/json", Accept: "application/json" }, body: JSON.stringify(a) }).then((a) => a.json()),
    addToCart = async (b) => {
        var a = b.parentElement,
            c = a.innerHTML;
        a.innerHTML = `{% render 'icon-loading' %}`;
        var d = { id: b.dataset.variantId, quantity: document.querySelector("input[name=quantity]") ? document.querySelector("input[name=quantity]").value : 1 };
        try {
            await addItem(d), (a.innerHTML = c);
            void 0 != CartPopup && CartPopup.Open();
        } catch (e) {
            console.log(e);
        }
    },
    onDelete = async (a) => {
        var b;
        (a.parentElement.innerHTML = `{% render 'icon-loading' %}`), await removeItem(a.dataset.id), void 0 != CartPopup && CartPopup.Refresh();
    };
document.addEventListener("Sync", async (e) => {
    var c,
        a,
        b,
        d = await getItem();
    "wholesale" != (b = localStorage.getItem("Customer_Mode") || "retail") || (Shopify.User.caps && Shopify.User.caps.wholesale) || (b = "retail"),
        (a = (c = d.items).filter((a) => !a.gift_card)).length &&
            a.forEach(async (a) => {
                var d;
                if ((d = a.options_with_values.filter((a) => "Customer" == a.name)).length && d.find((a) => "Customer" == a.name).value != b) {
                    removeItem(a.id.toString()).then((a) => console.log(a));
                    var e,
                        g = await fetch(`/products/${a.handle}.json`).then((a) => a.json()),
                        c = "";
                    if ((a.variant_title && (((c = a.variant_title.split("/"))[0] = b + " "), (c = c.join("/"))), (e = g.product.variants).length)) {
                        var f = e.find((a) => a.title === c);
                        f && addItem({ id: f.id.toString(), quantity: a.quantity });
                    }
                }
            });
});
</script>