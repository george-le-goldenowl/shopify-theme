{%- assign url = shop.url | append: page.url -%}
<div class="container">
    <div class="notice__content Contest-content">
    	{%- render 'icon-loading' -%}
    </div>
</div>
<script type="text/javascript">
'use strict';
var Contest = {};
Contest.Content = document.querySelector('.Contest-content');
Contest.Details = {};

window.addEventListener('load', async e => {
	try {
		var content = await fetch(window.server.host + `/wp-json/tatoo/action/get-contest`, {
			method: "POST",
			headers: {
	            "Content-Type": "application/json",
	            "Accept": "application/json"
	        },
	        body: JSON.stringify({
	        	email: `{{ customer.email }}`,
	        })
		})
		.then(res => res.json());

		if (content.err) {
			throw `{{ 'sections.contest.detail.no_found' | t }}`;
		} else {
			var contest = content.contest;
			Contest.Details = contest;

	        var content = contest.post_content.replace(/(?:\r\n|\r|\n)/g, '<br>');
	      
			var i = `
				<h2 class="ttl-6">${contest.post_title}</h2>
	            <div class="notice__mv">
	                <img src="data:image/jpeg;base64, ${contest.image}" alt="${contest.post_title}">
	            </div>
	            <div class="document">${content}</div>
	            <div class="submit-container" style="margin-top: 30px;">
	            	<div class="shipping__btn row">
		                <div class="col-sm-6">
		                    <div class="shipping__btn btn-submit">
		                        <div class="btn-payment"><a href="javascript:void(0)" onclick="Contest.Submitable(${contest.ID});">{{ 'sections.contest.detail.submit' | t }}</a></div>
		                        <sub class="SubmitEntryErr" style="color: red;"></sub>
		                    </div>
		                </div>
		                <div class="col-sm-6">
                            <div class="shipping__btn">
                                <div class="btn-back">
                                	<a href="{{ pages['contest-entries'].url }}">{{ 'sections.contest.detail.view' | t }}</a>
                                </div>
                            </div>
                        </div>
		            </div>
	            </div>
	            <div class="blog__share">
	                <span>{{ 'sections.contest.share' | t }}</span>
	                {%- render 'icon-share-twitter', url: url -%}
	                {%- render 'icon-share-fb', url: url -%}
	            </div>
			`;
			Contest.Content.innerHTML = i;
		}
	} catch(e) {
		console.log(e);
	}
});

Contest.Submitable = Id => {
	var contest = Contest.Details;
	try {
		switch (contest.submittable) {
			case 'ErrUnauthenticated':
				document.querySelector('#customer-login').classList.add('is-show');
				document.querySelector('.cart-bg').classList.add('is-show');
				throw `{{ 'sections.contest.detail.error.login' | t }}`;
				break;
			case 'ErrWrongUserType':
				throw `{{ 'sections.contest.detail.error.mode' | t }} ${contest.type}`;
				break;
			case 'ErrPoints':
				throw `{{ 'sections.contest.detail.error.point' | t }}`;
				break;
			case 'Success':
				Contest.ShowSubmitForm(Id);
				break;
		}
	} catch(e) {
		console.log(e);
		Contest.Content.querySelector('.SubmitEntryErr').innerHTML = e;
	}
};

Contest.ShowSubmitForm = Id => {
	Contest.SubmitContainer = Contest.Content.querySelector('.submit-container');
	Contest.SubmitContainerBtn = Contest.SubmitContainer.innerHTML;

	var forms = `
		<form method="post" action="/" id="submit-entry" accept-charset="UTF-8">
			<div class="shipping__ttl">{{ 'sections.contest.detail.form.post' | t }}</div>
			<div class="shipping__form">
				<input type="hidden" name="contestId" value="${Id}"/>
			    <div class="form-group">
			        <label for="postContestTitle">{{ 'sections.contest.detail.form.title' | t }}<span class="txt-error">*</span></label>
			        <input name="title" type="text" id="postContestTitle" class="form-control form-control-line" data-required=true>
			    </div>
			    <div class="form-group">
			        <label for="postContestImage">{{ 'sections.contest.detail.form.image' | t }}<span class="txt-error">*</span></label>
			        <input name="attached" type="file" id="postContestImage" class="form-control form-control-line" data-required=true>
			    </div>
			    <div class="form-group">
			        <label for="postContestDesc">{{ 'sections.contest.detail.form.desc' | t }} <span class="txt-error">*</span></label>
			        <textarea name="description" id="postContestDesc" cols="30" rows="10" class="form-control form-control-line" data-required=true></textarea>
			    </div>
			</div>
			<div class="shipping__btn row">
			    <div class="col-sm-6">
			        <div class="shipping__btn">
			            <div class="btn-payment"><a href="javascript:void(0);" onclick="Contest.SubmitEntry(this);">{{ 'sections.contest.detail.form.submit' | t }}</a></div>
			        </div>
			    </div>
			    <div class="col-sm-6">
			        <div class="shipping__btn">
			            <div class="btn-back"><a href="javascript:void(0);" onclick="Contest.HideSubmitForm(this)">{{ 'sections.contest.detail.form.cancel' | t }}</a></div>
			        </div>
			    </div>
			</div>
		</form>
	`;
	Contest.SubmitContainer.innerHTML = forms;
};

Contest.HideSubmitForm = () => {
	Contest.SubmitContainer.innerHTML = Contest.SubmitContainerBtn;
};

Contest.SubmitEntry = async e => {
	var e2 = e.cloneNode(!0),
		eWrap = e.parentElement;

	var Form = Contest.Content.querySelector('#submit-entry'),
		Image = Form.querySelector('#postContestImage'),
		Required = Form.querySelectorAll('[data-required=true]');

	eWrap.innerHTML = `{%- render 'icon-loading' -%}`;

	const VerifyRequired = Required => {
		var bool = false;
		Required.forEach(e => {
			e.value
				? (e.style.borderColor = '#ACB1C6')
				: ((e.style.borderColor = 'red'), bool = true);
		});

		if (bool) {
			throw 'ErrRequired';
		}
	};

	const VerifyImage = Image => {
		var part = Image.value.split('.'),
			type = part[part.length - 1];
		var Err = [];

		if (!['jpg', 'jpeg', 'png'].includes(type)) {
			Err.push('only supports: jpg, jpeg, png');
		}

		if ((Image.files[0].size / 1024 / 1024) > 2) {
			Err.push('maximun: 2 MiB');
		}

		if (Err.length > 0) {
			Image.parentElement.insertAdjacentHTML('beforeend', `<sub style="color: red;">${Err.join(', ')}</sub>`)
			throw 'ErrImage';
		}
	};

	try {
		VerifyRequired(Required);
		VerifyImage(Image);

		var data = new FormData();
		data.append('image', Image.files[0]);
		data.append('email', `{{ customer.email }}`);
		data.append('title', Form.querySelector('#postContestTitle').value);
		data.append('contestId', Form.querySelector('input[name=contestId]').value);
		data.append('description', Form.querySelector('#postContestDesc').value);

		await fetch(window.server.host + '/wp-json/tatoo/action/submit-entry', {
			method: "POST",
	        body: data
		})
		.then(res => res.json())
		.then(data => {
			if (data.err) {
				alert(`data.message`);
				throw 'SubmitFailed';
			} else {
				Contest.SubmitContainer.innerHTML = `<p>{{ 'sections.contest.detail.form.success' | t }}</p>`;
			}
		});
	} catch(e) {
		console.log(e);
		eWrap.innerHTML = ``;
		eWrap.appendChild(e2);
	}
};
</script>
{% schema %}
{
	"name": "Contest Page",
	"tag": "section",
	"class": "notice-page",
	"settings": []
}
{% endschema %}