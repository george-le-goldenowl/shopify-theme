{% assign extraItems = '' %}
<div class="container">
    <div class="row CartContent">
        <div class="col-lg-8">
            <div class="shopping-content-info">
                <h4 class="ttl-4 text-center">Shopping Cart</h4>
                {% if cart.item_count > 0 %}
                    <div class="table-cart">
                        <table class="table-cart-items">
                            <thead>
                                <tr>
                                    <th>Items</th>
                                    <th></th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Subtotal</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                {% endif %}
                <div class="table-cart-btn d-flex btn-link-black">
                    {{ 'Continue Shopping' | link_to: '/collections' }}
                    <div class="cart-update">
                        <a href="javascript:void(0);" onclick="Cart.Update(this);"><i class="fa fa-refresh"></i>Update Shopping Cart</a>    
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="shopping-list">
                <div class="btn-payment"><a href="/checkout"><i class="fa fa-lock"></i>Proceed to Payment</a></div>
                <div class="shopping-content" id="accordion">
                    <h3>Summary</h3>
                    <div class="shopping__ttl collapsed" data-toggle="collapse" data-target="#shipping-calculator" aria-expanded="true" aria-controls="shipping-calculator">
                        Estimate Shipping and Tax<i class="fa fa-angle-down" aria-hidden="true"></i>
                    </div>
                    <div id="shipping-calculator" class="collapse" aria-labelledby="headingOne" data-parent="#accordion">
                        <p>Enter your destination to get a shipping estimate.</p>
                        <div class="form-group">
                            <label for="">Country</label>
                            <select name="shipping-country" class="custom-select" onchange="genProvinces(this)">
                                <option value="" selected>Select Countries</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="">Zip/Postal Code</label>
                            <input type="text" name="shipping-postal" class="form-control form-control-line" value="" onblur="getShippingRates(this)">
                            <p class="shipping-note"><small>Fill in your name and address information to see available shipping options</small></p>
                        </div>
                    </div>
                    <hr>
                      <div 
                        class="shopping__ttl collapsed" 
                        data-toggle="collapse" 
                        data-target="#extraFees" 
                        aria-expanded="true" 
                        aria-controls="extraFees">Additional Options<i class="fa fa-angle-down" aria-hidden="true"></i>
                      </div>
                      <div id="extraFees" class="collapse" aria-labelledby="headingOne">
                          <div class="form-group add-options"></div>
                      </div>
                    <hr>
                    <div class="d-flex shopping-content__sum">
                        <span>Order Total</span>
                        <span class="cart-total">{{ cart.total_price | money }}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="/services/javascripts/countries.js"></script>
<script type="text/javascript">
'use strict';
var element = {};
element.countries = document.querySelector('select[name=shipping-country]');
element.province = document.querySelector('select[name=shipping-province]');
element.postal = document.querySelector('input[name=shipping-postal]');
element.note = document.querySelector('p.shipping-note');

const Cart = {
    Gift: [],
    Items: `{{ cart.items | json }}`,
    Additional: `{{ all_products['additional-options'] | json }}`
};

window.addEventListener('load', async event => {
    Cart.Content = document.querySelector('.CartContent');
    Cart.TotalPrice = Cart.Content.querySelector('.cart-total');
    Cart.TableItems = Cart.Content.querySelector('.table-cart-items');
    Cart.AdditionalItems = Cart.Content.querySelector('.add-options');

    // Dump Cart Items
    const cart = Cart.Items
        .replace(/[\n\r\u2028\u2029]/g, "")
        .replace(/(\r\n|\n|\r)/gm, "")
        .replace(/"product_description":".*?(?=\"variant_title)/gm, "");
    var i;
    if ((i = JSON.parse(cart)).length) {
        i.forEach(e => {
            if (e.gift_card) {
                Cart.Gift.push(e);
                return;
            }
            var options = '';
            if (e.options_with_values.length) {
                e.options_with_values.forEach(e => {
                    options += `<p><span>${e.name}: </span>${e.value}</p>`;
                });
            }
            var sku = e.sku || 'N/A';
            var item = `
                <tr data-line-id="${e.id}">
                    <td class="col1">
                        <div class="cart-img"><img src="${e.image}" alt="${e.title}"/></div>
                    </td>
                    <td class="col2">
                        <a href="${e.url}" class="ttl">${e.title}</a>
                        ${options}
                        <p><small>SKU ${sku}</small></p>
                    </td>
                    <td class="col3">
                        <div><p>${Shopify.formatMoney(e.price)}</p></div>
                    </td>
                    <td class="col4">
                        <input type="type" class="qty" value="${e.quantity}">
                    </td>
                    <td class="col5">
                        <div>
                            <p>${Shopify.formatMoney(e.line_price)}</p>
                            <div class="btn-link-gray">
                                <a href="javascript:void(0)" onclick="Cart.Delete(this)" data-id="${e.id}"><i class="fa fa-trash"></i>Delete Product</a>
                            </div>
                        </div>
                    </td>
                </tr>
            `;
            Cart.TableItems.getElementsByTagName('tbody')[0].insertAdjacentHTML('beforeend', item);
        });
    }

    // Dump Additional Items
    const adds = JSON.parse(Cart.Additional);
    if (adds) {
        adds.variants.forEach(e => {
            var checked = Cart.Gift.find(a => a.id === e.id) ? 'checked' : '';
            var i = `
                <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="${e.id}" onclick="Cart.ToggleAdds(this)" data-id="${e.id}" ${checked}>
                    <label class="custom-control-label" for="${e.id}"><span>${Shopify.formatMoney(e.price)}</span>${e.title}</label>
                </div>
            `;
            Cart.AdditionalItems.insertAdjacentHTML('beforeend', i);
        }); 
    }

    genCountries();
});

Cart.Update = async e => {
    var e2 = e.cloneNode(!0),
        eWrap = e.parentElement;
    eWrap.innerHTML = `{% render 'icon-loading' %}`;
    try {
        var data = {
            'updates': {}
        },
        CartItems = Cart.Content.querySelectorAll('tr[data-line-id]');
        CartItems.forEach(e => {
            var id = parseInt(e.getAttribute('data-line-id')),
                qty = parseInt(e.querySelector('.qty').value);

            data['updates'][id] = qty;
        });
        await updateItems(data);
        Cart.Refresh();
    } catch(e) {
        console.log(e);
    }

    eWrap.innerHTML = '';
    eWrap.appendChild(e2);
};

Cart.Delete = async e => {
    try {
        var id = e.getAttribute('data-id'),
            e2 = e.cloneNode(!0),
            eWrap;
        ((eWrap = e.parentElement), eWrap.innerHTML = `{% render 'icon-loading' %}`);

        await removeItem(id);

        // remove additional if there are no items in cart
        var cart = await getItem(),
            c;

        if (cart.item_count > 0 && (c = cart.items.filter(i => !i.gift_card)).length <= 0) {
            var d = {
                'updates': {}
            };

            cart.items.filter(i => {
                d['updates'][i.id.toString()] = 0;
            });

            await updateItems(d);
        }
        await Cart.Refresh();

        Cart.Content.querySelector(`tr[data-line-id="${id}"]`).remove();
        
    } catch(e) {
        console.log(e);
        eWrap.innerHTML = '';
        eWrap.appendChild(e2);
    }
};

Cart.ToggleAdds = async e => {
    var qty = e.checked ? 1 : 0,
        endpoint = e.checked ? '/cart/add.json' : '/cart/change.json';

    try {
        await fetch(endpoint, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify({
                id: e.getAttribute('data-id'),
                quantity: qty
            })
        })
        .then(res => res.json())
        .then(data => {
            Cart.RefreshTotal(data);
        });
    } catch(e) {
        console.log(e);
        e.checked = !e.checked;
    }
};

Cart.Refresh = async () => {
    var cart = await getItem(),
        h;

    if (cart.item_count <= 0) {
        h = `
        <div class="col-lg-12">
            <div class="shopping-content-info">
                <h4 class="ttl-4 text-center">Your cart is currently empty.</h4>
                <div class="table-cart-btn d-flex btn-link-black">
                    <a href="/collections" title="">Continue Shopping</a>
                </div>
            </div>
        </div>
        `;
        Cart.Content.innerHTML = h;
    } else {
        Cart.TotalPrice.innerHTML = Shopify.formatMoney(cart.total_price);
    }
};

async function getPrepareShipping(data) {
    const result = await fetch("/cart/prepare_shipping_rates", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
        },
        body: JSON.stringify({
            shipping_address: data
        })
    });

    var resultJson = await result.json(); 
    return {resultJson: resultJson, result: result};
}
async function getSyncShippingRate() {
    const result = await fetch("/cart/async_shipping_rates", {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
    });

    var resultJson = await result.json();
    return resultJson;
}
function genCountries() {
    if (typeof Countries != undefined) {
        var options = '';
        Object.keys(Countries).forEach(key => {
            options += `<option value="${key}">${key}</option>`;
        });
        element.countries.insertAdjacentHTML('beforeend', options);
    }
}
function genProvinces(e) {
    var provinces = Countries[e.value].provinces;
    if (provinces) {
        var province = '<div class="form-group"><select name="shipping-province" class="custom-select" onchange="selectedProvinces(this)">';
        provinces.forEach(e => {
            province += `<option value="${e}">${e}</option>`;
        });
        province += '</select></div>';
        element.countries.parentElement.insertAdjacentHTML('afterend', province);
    } else {
        if (document.querySelector('select[name=shipping-province]')) {
            document.querySelector('select[name=shipping-province]').remove();
        }
        element.postal.focus();
    }
}
async function getShippingRates(e) {
    var data = {
        zip: e.value,
        country: element.countries.value
    };

    document.querySelector('select[name=shipping-province]') &&
        (data.province = document.querySelector('select[name=shipping-province]').value);

    if (data.country) {
        element.postal.disabled = true;
        element.note.insertAdjacentHTML('afterend', '<div class="fa fa-spinner fa-spin"></div>');
        element.note.querySelector('small').innerText = '';
        element.note.querySelector('small').style.color = '';
        let res = await getPrepareShipping(data);
        
        switch (res.result.status) {
            case 422:
                element.note.querySelector('small').style.color = 'red';
                element.note.querySelector('small').innerText = res.resultJson.zip.join(', ');
                break;
            case 202:
                let methods = await getSyncShippingRate();
                if (methods.shipping_rates) {
                    var method = '';
                    methods.shipping_rates.forEach(e => {
                        method += `${e.name}: ${Shopify.formatMoney(e.price)}<br/>`;
                    });
                    element.note.querySelector('small').innerHTML = method;
                }
                break;
            default:
                // statements_def
                break;
        }

        element.postal.disabled = false;
        element.note.nextSibling.remove();
    }
}
function selectedProvinces() {
    element.postal.focus();
}
</script>
{% schema %}
  {
    "name": "Cart Page",
    "tag": "section",
    "class": "section-content-other",
    "settings": []
  }
{% endschema %}