{%- assign banner = section.settings.banner -%}
{% if  banner != blank %}
    <div class="blog__mv">
        {{ banner | image_url: width: 1680, crop: 'center' | image_tag: loading: 'lazy', alt: banner.alt  }}
    </div>
{% endif %}
<div class="container">
    <div class="blog__content">
        <h2 class="blog__ttl">Contest Entries</h2>
        <div class="blog__search">
            <form method="GET">
                <input type="text" name="search" class="form-control form-control-line EntriesListSearch" placeholder="Search Blog">
                <i class="icon-search"></i>
            </form>
        </div>
        <div class="row blog-other EntriesList">{%- render 'icon-loading' -%}</div>
    </div>
</div>
<script type="text/javascript">
'use strict';
var EntriesList = {};
EntriesList.PerPage = 10;

EntriesList.GetParam = e => {
    var queryString = window.location.search;

    if (queryString) {
        var urlParams = new URLSearchParams(queryString);

        switch (e) {
            case 'page':
                return parseInt(urlParams.get(e)) || 1;
                break;
            default:
                return urlParams.get(e) || ``;
                break;
        }
    }

    return 1;
}

EntriesList.GetList = async e => {
    const result = fetch(window.server.host + '/wp-json/tatoo/action/get-contest-entries', {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
        },
        body: JSON.stringify({
            paged: EntriesList.GetParam('page'),
            perPage: EntriesList.PerPage,
            search: EntriesList.GetParam('search'),
        })
    })
    .then(res => res.json());

    return result;
};

EntriesList.UpdateParams = (key, value) => {
    var uri = window.location.href;
    var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
    var separator = uri.indexOf('?') !== -1 ? "&" : "?";

    if (uri.match(re)) {
        return uri.replace(re, '$1' + key + "=" + value + '$2');
    } else {
        return uri + separator + key + "=" + value;
    }
};

EntriesList.GenPagination = pages => {
    try {
        if (pages <= 1) {
            throw 'noPagination';
        }
        
        var page = parseInt(EntriesList.GetParam('page'));
        var paginate = `<ul class="pagination">`;

        // previous
        var active = page == 1 ? 'style="pointer-events: none;"' : '',
            previousPage = page - 1,
            uri = EntriesList.UpdateParams('page', previousPage);
        paginate += `
        <li class="page-item">
            <a class="page-link" ${active} href="${uri}" aria-label="Previous">
                <span aria-hidden="true"><i class="fa fa-angle-left" aria-hidden="true"></i></span>
                <span class="sr-only">Previous</span>
            </a>
        </li>`;

        for (var i = 1; i <= pages; i++) {
            active = i == page ? 'active' : '';
            uri = EntriesList.UpdateParams('page', i);
            paginate += `<li class="page-item ${active}"><a class="page-link" href="${uri}">${i}</a></li>`;
        }

        // next
        active = page == pages ? 'style="pointer-events: none;"' : '';
        var nextPage = page + 1;
        uri = EntriesList.UpdateParams('page', nextPage);
        paginate += `
        <li class="page-item">
            <a class="page-link" ${active} href="${uri}" aria-label="Next">
                <span aria-hidden="true"><i class="fa fa-angle-right" aria-hidden="true"></i></span>
                <span class="sr-only">Next</span>
            </a>
        </li>`;

        paginate += '</ul>'; 

        return paginate;       
    } catch(e) {
        console.log(e);
        return ``;
    }
};

window.addEventListener('load', async e => {
    EntriesList.Content = document.querySelector('.EntriesList');
    EntriesList.Search = document.querySelector('.EntriesListSearch');

    var search;
    if ((search = EntriesList.GetParam('search'))) {
        EntriesList.Search.value = search;
    }

    try {
        const result = await EntriesList.GetList({});

        if (result.err) {
            throw result.message;
        }

        var rs = result.content;
        rs.length &&
            (EntriesList.Content.innerHTML = ''),
            rs.forEach(e => {
                var o = `
                    <div class="col-sm-6">
                        <div class="blog__item">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="blog__item__img">
                                        <a href="" data-toggle="modal" data-target="#detailModal-${e.id}"><img src="data:image/jpeg;base64, ${e.image}" alt="${e.title}"></a>
                                    </div>
                                </div>
                                <div class="col-md-7">
                                    <div class="blog__item__info">
                                        <a href="" class="ttl" data-toggle="modal" data-target="#detailModal-${e.id}">${e.title}</a>
                                        <div class="row author">
                                            <div class="col-6">
                                                <i class="fa fa-user-o"></i>by ${e.author}
                                            </div>
                                            <div class="col-6"> <i class="fa fa-calendar-check-o"></i>${e.date}</div>
                                        </div>
                                        ${e.short_description.replace(/(?:\r\n|\r|\n)/g, '<br>')}
                                        <div class="btn-more">
                                            <a href="" data-toggle="modal" data-target="#detailModal-${e.id}">Read more</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal fade" id="detailModal-${e.id}" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h2 class="blog__ttl02">${e.title}</h2>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <div class="document">
                                        <figure class="text-center">
                                            <img src="data:image/jpeg;base64, ${e.image}" alt="${e.title}">
                                        </figure>
                                        ${e.description.replace(/(?:\r\n|\r|\n)/g, '<br>')}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                EntriesList.Content.insertAdjacentHTML('beforeend', o);
            });

        var pages;
        if (
            (pages = Math.ceil(result.total/EntriesList.PerPage)) > 1
        ) {
            var p = EntriesList.GenPagination(pages);
            EntriesList.Content.parentElement.insertAdjacentHTML('beforeend', p);
        }
    } catch(e) {
        console.log(e);
        EntriesList.Content.innerHTML = e;
    }
});
</script>
{% schema %}
  {
    "name": "Contest Entries",
    "class": "blog-page",
    "settings": [
      {
        "id": "banner",
        "type": "image_picker",
        "label": "Banner"
      }
    ]
  }
{% endschema %}