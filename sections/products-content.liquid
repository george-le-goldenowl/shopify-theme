<div class="container">
    <div class="row">
        <div class="col-lg-3 order-ft-02">
            <h3 class="ttl-02">
                <i class="icon-filter"></i>{{ 'products.facets.filter_button' | t }}
            </h3>
            <!-- Filters -->
            {%- assign Filters = linklists['filter'].links -%}
            {%- if Filters != empty -%}
                <ul class="fillter-menu">
                    {% for item in Filters %}
                        <li class="has-child">
                            <a href="javascript: void(0);" onclick="javascript: this.nextElementSibling.classList.toggle('active');" class="js-menu-child">{{ item.title }}</a>
                            <div class="has-child-sub">
                                {% for sub in item.links %}
                                      {%- assign name = sub.title | remove: '[CATEGORY]' | remove: '[BRAND]' -%}
                                    <div class="custom-control custom-radio">
                                        <input type="radio" id="{{ sub.handle }}" name="collection[]" class="custom-control-input" value="{{ sub.handle }}" onclick="Products.Collection(this)">
                                        <label class="custom-control-label" for="{{ sub.handle }}">{{ name }}</label>
                                    </div>
                                {% endfor %}
                            </div>
                        </li>
                    {% endfor %}
                </ul>
            {%- endif -%}
        </div>
        <div class="col-lg-9 order-ft-01">
            <div class="row product-action">
                <div class="col-md-4 col-6 order-ft-02">
                    <div class="product-dropdown">
                        <span class="product-dropdown-label">{{ 'products.facets.per_page' | t }}</span>
                        <div class="dropdown">
                            <button class="dropdown-toggle" type="button" id="NumberProductsShow" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">8</button>
                            <div class="dropdown-menu" aria-labelledby="NumberProductsShow">
                                <a class="dropdown-item" href="javascript: Products.SwitchNumbers(8);">8</a>
                                <a class="dropdown-item" href="javascript: Products.SwitchNumbers(16);">16</a>
                                <a class="dropdown-item" href="javascript: Products.SwitchNumbers(24);">24</a>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Sort -->
                <div class="col-md-4 order-ft-01">
                    <div class="product-dropdown">
                        <span class="product-dropdown-label">{{ 'products.facets.sort_by_label' | t }}</span>
                        <div class="dropdown">
                            <button class="dropdown-toggle" type="button" id="SortProducts" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                            <div class="dropdown-menu" aria-labelledby="SortProducts">
                              <a class="dropdown-item" href="javascript: Products.SwitchSorts('Name');">{{ 'products.facets.sort.name' | t }}</a>
                              <a class="dropdown-item" href="javascript: Products.SwitchSorts('Price');">{{ 'products.facets.sort.price' | t }}</a>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Paginate -->
                <div class="col-md-4 col-6 order-ft-03">
                    <ul class="ProductsPagination"></ul>
                </div>
            </div>

            <div class="top-product product-list ProductsList">{%- render 'icon-loading' -%}</div>
        </div>
    </div>
</div>
<script type="text/javascript">
'use strict';
var Products = { Result: [], Page: 1, Perpage: 8 };
(Products.List = document.querySelector(".ProductsList")),
    (Products.Sorts = document.querySelector("#SortProducts")),
    (Products.Numers = document.querySelector("#NumberProductsShow")),
    (Products.Pagination = document.querySelector(".ProductsPagination")),
    (Products.Collection = async (a) => {
        (Products.List.innerHTML = `{%- render 'icon-loading' -%}`), (Products.Page = 1), (Products.Perpage = 8);
        var b = await fetch(`/collections/${a.value}/products.json`).then((a) => a.json());
        (Products.Result = Products.Filter("customer", b.products)), Products.ShowResults();
    }),
    (Products.SwitchNumbers = (a) => {
        (Products.Numers.innerText = a), (Products.Perpage = a), (Products.Page = 1), Products.ShowResults();
    }),
    (Products.SwitchSorts = (a) => {
        (Products.Sorts.innerText = a), (Products.Result = Products.Filter(a.toLowerCase(), Products.Result)), Products.ShowResults();
    }),
    (Products.Filter = (d, b) => {
        var c,
            a = [];
        switch (("wholesale" != (c = localStorage.getItem("Customer_Mode") || "retail") || (Shopify.User.caps && Shopify.User.caps.wholesale) || (c = "retail"), d)) {
            case "customer":
                a = b.filter((a) => {
                    var b;
                    return (
                        (b = a.options.find((a) => "Customer" == a.name)
                            ? a.variants.find((a) => {
                                  if (a.title.includes(c) && a.available) return a;
                              })
                            : a.variants.find((a) => {
                                  if (a.available) return a;
                              })) || (b = a.variants[0]),
                        (a.id = b.id),
                        (a.price = b.price),
                        (a.available = b.available),
                        a
                    );
                });
                break;
            case "name":
                a = b.sort((c, d) => {
                    var a = c.title.toLowerCase(),
                        b = d.title.toLowerCase();
                    return a < b ? -1 : a > b ? 1 : 0;
                });
                break;
            case "price":
                a = b.sort((a, b) => {
                    var c = parseFloat(a.price),
                        d = parseFloat(b.price);
                    return c - d;
                });
        }
        return a;
    }),
    (Products.Paginate = () => {
        try {
            if (!Products.Result) throw "NoResult";
            if (((a = Products.Page), (d = Math.ceil(Products.Result.length / Products.Perpage)) <= 1)) throw "noPagination";
            var d,
                a,
                e,
                g,
                c = '<ul class="pagination">';
            a > 1 &&
                (c += `
                <li class="page-item">
                    <a class="page-link" href="javascript: Products.Page = ${a - 1}; Products.ShowResults();" aria-label="Previous">
                        <span aria-hidden="true"><i class="fa fa-angle-left" aria-hidden="true"></i></span>
                        <span class="sr-only">{{ 'general.pagination.previous' | t }}</span>
                    </a>
                </li>
            `);
            for (var b = 1; b <= d; b++) (e = b == a ? "active" : ""), (c += `<li class="page-item ${e}"><a class="page-link" href="javascript: Products.Page = ${b}; Products.ShowResults();">${b}</a></li>`);
            return (
                a < d &&
                    (c += `
            <li class="page-item">
                <a class="page-link" href="javascript: Products.Page = ${a + 1}; Products.ShowResults();" aria-label="Next">
                    <span aria-hidden="true"><i class="fa fa-angle-right" aria-hidden="true"></i></span>
                    <span class="sr-only">{{ 'general.pagination.next' | t }}</span>
                </a>
            </li>`),
                (c += "</ul>")
            );
        } catch (f) {
            return console.log(f), "";
        }
    }),
    (Products.ShowResults = () => {
        if (Products.Result.length) {
            var a,
                c = (Products.Page - 1) * Products.Perpage,
                d = Products.Page * Products.Perpage;
            if ((a = Products.Result.slice(c, d)).length) {
                var b = '<div class="row">';
                a.forEach((a) => {
                    var c = a.image ? a.image : a.images[0] ? a.images[0].src : "";
                    b += `
                <div class="col-lg-3 col-md-4 col-sm-6 col-12">
                    <div class="top-product__item">
                        <a href="/products/${a.handle}">
                            <div class="top-product__item__img lazy">
                                <img src="${c}" alt="${a.title}">
                            </div>
                            <p class="ttl">${a.title}</p>
                            <p class="price">${Shopify.formatMoney(a.price)}</p>
                        </a>
                        <div class="product-nav">
                            <a href="javascript:void(0)" onclick="addToCart(this)" data-variant-id="${a.id}"><i class="icon-cart-01"></i></a>
                        </div>
                    </div>
                </div>
                `;
                }),
                    (b += "</div>"),
                    (Products.List.innerHTML = b),
                    (Products.Pagination.innerHTML = Products.Paginate()),
                    document.dispatchEvent(window.Effect);
            }
        } else Products.List.innerHTML = `{{ 'products.facets.no_results' | t }}`;
    }),
    document.addEventListener("Sync", async (f) => {
        var e,
            a,
            g,
            h,
            d,
            b = GetURLParam("keyword");
        if ((d = GetHashParam())) {
            FetchByHash(d);
        } else
            (a = (e = (void 0 != b && b ? ((SearchFormInput.value = b), await fetch(`/search?type=product&q=${b}`).then((a) => a.json())) : await fetch("/products.json").then((a) => a.json())).products).filter(
                (a) => "Gift Cards" != a.product_type
            )).length && ((a = Products.Filter("customer", a)), (Products.Result = a)),
                Products.ShowResults();
    });

const FetchByHash = (d) => {
    if (typeof d == 'string') {
        d = d;
    } else {
        d = d.getAttribute('data-id');
    }
    var c = document.querySelector(`input#${d}`);
    if (c) (c.checked = true, c.closest('.has-child-sub').classList.add('active'));
    Products.Collection(d);
};

const GetHashParam = () => {
    var a = "";
    return window.location.hash && (a = window.location.hash.substring(1)), a;
};

const GetURLParam = (a) => {
    return new URL(window.location.href).searchParams.get(a);
};
</script>
{% schema %}
  {
    "name": "List Products",
    "tag": "section",
    "class": "section-content",
    "settings": []
  }
{% endschema %}