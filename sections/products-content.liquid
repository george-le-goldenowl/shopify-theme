<div class="container">
    <div class="row">
        <div class="col-lg-3 order-ft-02">
            <h3 class="ttl-02">
                <i class="icon-filter"></i>Filter
            </h3>
            <!-- Filters -->
            {%- assign Filters = linklists['filter'].links -%}
            {%- if Filters != empty -%}
                <ul class="fillter-menu">
                    {% for item in Filters %}
                        <li class="has-child">
                            <a href="{{ item.url }}" onclick="javascript: this.nextElementSibling.classList.toggle('active');" class="js-menu-child">{{ item.title }}</a>
                            <div class="has-child-sub">
                                {% for sub in item.links %}
                                      {%- assign name = sub.title | remove: '[CATEGORY]' | remove: '[BRAND]' -%}
                                    <div class="custom-control custom-radio">
                                        <input type="radio" id="{{ sub.handle }}" name="collection[]" class="custom-control-input" value="{{ sub.handle }}" onclick="Products.Collection(this)">
                                        <label class="custom-control-label" for="{{ sub.handle }}">{{ name }}</label>
                                    </div>
                                {% endfor %}
                            </div>
                        </li>
                    {% endfor %}
                </ul>
            {%- endif -%}
        </div>
        <div class="col-lg-9 order-ft-01">
            <div class="row product-action">
                <div class="col-md-4 col-6 order-ft-02">
                    <div class="product-dropdown">
                        <span class="product-dropdown-label">Show per page</span>
                        <div class="dropdown">
                            <button class="dropdown-toggle" type="button" id="NumberProductsShow" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">8</button>
                            <div class="dropdown-menu" aria-labelledby="NumberProductsShow">
                                <a class="dropdown-item" href="javascript: Products.SwitchNumbers(8);">8</a>
                                <a class="dropdown-item" href="javascript: Products.SwitchNumbers(16);">16</a>
                                <a class="dropdown-item" href="javascript: Products.SwitchNumbers(24);">24</a>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Sort -->
                <div class="col-md-4 order-ft-01">
                    <div class="product-dropdown">
                        <span class="product-dropdown-label">Sort by</span>
                        <div class="dropdown">
                            <button class="dropdown-toggle" type="button" id="SortProducts" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Relevance</button>
                            <div class="dropdown-menu" aria-labelledby="SortProducts">
                              <a class="dropdown-item" href="">Relevance</a>
                              <a class="dropdown-item" href="javascript: Products.SwitchSorts('Name');">Name</a>
                              <a class="dropdown-item" href="javascript: Products.SwitchSorts('Price');">Price</a>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Paginate -->
                <div class="col-md-4 col-6 order-ft-03">
                    <ul class="ProductsPagination"></ul>
                </div>
            </div>

            <div class="top-product product-list ProductsList">{%- render 'icon-loading' -%}</div>
        </div>
    </div>
</div>
<script type="text/javascript">
'use strict';
var Products = {
    Result: [],
    Page: 1,
    Perpage: 8
};
Products.List = document.querySelector('.ProductsList');
Products.Sorts = document.querySelector('#SortProducts');
Products.Numers = document.querySelector('#NumberProductsShow');
Products.Pagination = document.querySelector('.ProductsPagination');

Products.Collection = async handle => {
    Products.List.innerHTML = `{%- render 'icon-loading' -%}`;

    Products.Page = 1;
    Products.Perpage = 8;

    var result = await fetch(`/collections/${handle.value}/products.json`).then(res => res.json());

    Products.Result = result.products;
    Products.ShowResults();
};

Products.SwitchNumbers = number => {
    Products.Numers.innerText = number;

    Products.Perpage = number;
    Products.ShowResults();
};

Products.SwitchSorts = type => {
    Products.Sorts.innerText = type;
    Products.Result = Products.Filter(type.toLowerCase(), Products.Result);
    Products.ShowResults();
};

Products.Filter = (by, data) => {
    var b, r = [];
    "wholesale" != (b = localStorage.getItem("Customer_Mode") || "retail") || (Shopify.User.caps && Shopify.User.caps.wholesale) || (b = "retail");

    switch (by) {
        case 'customer':
            r = data.filter(i => {
                var o;
                if (i.options.find(i => i.name == 'Customer')) {
                    o = i.variants.find(i => {
                        if (i.title.includes(b) && i.available) {
                            return i;
                        }
                    });
                } else {
                    o = i.variants.find(i => {
                        if (i.available) {
                            return i;
                        }
                    });
                }

                if (!o) {
                    // if there is no available variant, pick the first one
                    o = i.variants[0];
                }

                i.id = o.id;
                i.price = o.price;
                i.available = o.available;

                return i;
            });
            break;
        case 'name':
            r = data.sort((a, b) => {
                var x = a.title.toLowerCase(),
                    y = b.title.toLowerCase();

                return x < y ? -1 : x > y ? 1 : 0;
            });
            break;
        case 'price':
            r = data.sort((a, b) => {
                var x = parseFloat(a.price),
                    y = parseFloat(b.price);

                return x - y;
            });
            break;
        default:
            // statements_def
            break;
    }

    return r;
};

Products.Paginate = () => {
    try {
        var pages, page;
        
        if (!Products.Result) {
            throw 'NoResult';
        }

        page = Products.Page;
        pages = Math.ceil(Products.Result.length/Products.Perpage);

        if (pages <= 1) {
            throw 'noPagination';
        }
        
        var paginate = `<ul class="pagination">`,
            active, 
            uri;

        // previous
        if (page > 1) {
            paginate += `
                <li class="page-item">
                    <a class="page-link" href="javascript: Products.Page = ${page - 1}; Products.ShowResults();" aria-label="Previous">
                        <span aria-hidden="true"><i class="fa fa-angle-left" aria-hidden="true"></i></span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
            `;
        }

        for (var i = 1; i <= pages; i++) {
            active = i == page ? 'active' : '';
            paginate += `<li class="page-item ${active}"><a class="page-link" href="javascript: Products.Page = ${i}; Products.ShowResults();">${i}</a></li>`;
        }

        // next
        if (page < pages) {
            paginate += `
            <li class="page-item">
                <a class="page-link" href="javascript: Products.Page = ${page + 1}; Products.ShowResults();" aria-label="Next">
                    <span aria-hidden="true"><i class="fa fa-angle-right" aria-hidden="true"></i></span>
                    <span class="sr-only">Next</span>
                </a>
            </li>`;
        }

        paginate += '</ul>'; 

        return paginate;       
    } catch(e) {
        console.log(e);
        return ``;
    }
};

Products.ShowResults = () => {
    if (Products.Result) {
        var from = (Products.Page - 1) * Products.Perpage,
            to = Products.Page * Products.Perpage,
            i;
        
        if ((i = Products.Result.slice(from, to)).length) {
            var o = `<div class="row">`;
            i.forEach(e => {
                var image = e.images[0] ? e.images[0].src : '';
                o += `
                <div class="col-lg-3 col-md-4 col-sm-6 col-12">
                    <div class="top-product__item">
                        <a href="/products/${e.handle}">
                            <div class="top-product__item__img lazy">
                                <img src="${image}" alt="${e.title}">
                            </div>
                            <p class="ttl">${e.title}</p>
                            <p class="price">${Shopify.formatMoney(e.price)}</p>
                        </a>
                        <div class="product-nav">
                            <a href="javascript:void(0)" onclick="addToCart(this)" data-variant-id="${e.id}"><i class="icon-cart-01"></i></a>
                        </div>
                    </div>
                </div>
                `;
            });
            o += `</div>`;

            Products.List.innerHTML = o;
            Products.Pagination.innerHTML = Products.Paginate();

            document.dispatchEvent(window.Effect);
        }
    } else {
        Products.List.innerHTML = 'No products found';
    }
};

document.addEventListener('Sync', async e => {
    // get all products
    var result = await fetch('/products.json').then(res => res.json()),
        o,
        i;

    if ((i = (o = result.products).filter(i => 'Gift Cards' != i.product_type)).length) {
        i = Products.Filter('customer', i);
        Products.Result = i;
        Products.ShowResults();
    }
});
</script>
{% schema %}
  {
    "name": "List Products",
    "tag": "section",
    "class": "section-content",
    "settings": []
  }
{% endschema %}